name: "Terraform"

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      # output the names of the filters that had changed (https://github.com/dorny/paths-filter)
      stacks: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup Path filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            provision/terraform/cloudflare: 'provision/terraform/cloudflare/**'
  global-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.2

      - name: Check Format
        run: terraform fmt -check -recursive -diff

      - name: TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  terraform:
    name: "Terraform"
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.stacks != '[]' && needs.changes.outputs.stacks != '' }}
    strategy:
      matrix:
        stack: ${{ fromJSON(needs.changes.outputs.stacks) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init ${{ matrix.stack }}
        working-directory: ${{ matrix.stack }}
        id: init
        run: terraform init

      - name: Terraform Validate ${{ matrix.stack }}
        working-directory: ${{ matrix.stack }}
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan ${{ matrix.stack }}
        working-directory: ${{ matrix.stack }}
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply ${{ matrix.stack }}
        working-directory: ${{ matrix.stack }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
